CLASS1 HOMEWORK

/* To initialize a Git repository,octocat.txt is the name of the file */
> git init
	Initialized empty Git repository in /.git/	
	success!

/* Next up, let's type the git status command to see what the current state of our project is:*/
Success!

/* You should run the git status command again to see how the repository status has changed:*/
>git status
Success!

/* To tell Git to start tracking changes made to octocat.txt, we first need to add it to the staging area by using git add*/
> git add octocat.txt

/* Git is now tracking our octocat.txt file. Let's run git status again to see where we stand:*/
>git status
Success!

/* To store our staged changes we run the commit command with a message describing what we've changed */
>git commit -m "Add cute octocat story"
Success!

/* I put some in a directory named "octofamily" and some others ended up in the root of our "octobox" directory. Luckily, we can add all the new files using a wildcard with git add. */
>git add '*.txt'
success!

/*commit*/
>git commit -m 'Add all the octocat txt files'
success!

/* Use git log that remembers all the changes we've committed so far */
>git log
success!

/*  To push our local repo to the GitHub server we'll need to add a remote repository. */
>git remote add origin https://github.com/try-git/try_git.git
success!

/*The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. Go ahead and push it!*/ 
>git push -u origin master
success!

/* We can check for changes on our GitHub repository and pull down any new changes by running */
>git pull origin master
success!

/* Let's take a look at what is different from our last commit by using the git diff command.In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer.*/
>git diff HEAD
success!

/* Let's use git add to stage octofamily/octodog.txt, which I just added to the family for you. */
> git add octofamily/octodog.txt
success!

/* now go ahead and run git diff with the --staged option to see the changes you just staged */
> git diff --staged
success!

/* You can unstage files by using the git reset command */
>git reset octofamily/octodog.txt
success!

/* Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>.*/
>git checkout -- octocat.txt
success!

/* We want to remove all these pesky octocats, so let's create a branch called clean_up */
> git branch clean_up
success!

/* You can switch branches using the git checkout <branch> command. */
>git checkout clean_up
success!

/* Ok, so you're in the clean_up branch. You can finally remove all those pesky octocats by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us*/
>git rm '*.txt'
success!
 
/* run git status to check the changes you're about to commit. */
>git commit -m "Remove all the cats"
success!

/* Go ahead and checkout the master branch: */
>git checkout master
success

/* We're already on the master branch, so we just need to tell Git to merge the clean_up branch into it */
>git merge clean_up
success!

/* You can use git branch -d <branch name> to delete a branch */
>git branch -d clean_up
success!

/* The Final Push */
>git push
success!


 

